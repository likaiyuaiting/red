 快速编辑
11.1 改变大小写

    ~: 反转光标所在字符的大小写。
    可视模式下的U或u：把选中的文本变为大写或小写。
    gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。

11.2 替换（normal模式）

    r: 替换光标处的字符，同样支持汉字。
    R: 进入替换模式，按esc回到正常模式。

11.3 撤消与重做（normal模式）

    [n] u: 取消一(n)个改动。
    :undo 5 -- 撤销5个改变。
    :undolist -- 你的撤销历史。
    ctrl + r: 重做最后的改动。
    U: 取消当前行中所有的改动。
    :earlier 4m -- 回到4分钟前
    :later 55s -- 前进55秒

11.4 宏

    . --重复上一个编辑动作
    qa：开始录制宏a（键盘操作记录）
    q：停止录制
    @a：播放宏a

12. 编辑特殊文件
12.1 文件加解密

    vim -x file: 开始编辑一个加密的文件。
    :X -- 为当前文件设置密码。
    :set key= -- 去除文件的密码。

这里是 滇狐总结的比较高级的vi技巧。
12.2 文件的编码

    :e ++enc=utf8 filename, 让vim用utf-8的编码打开这个文件。
    :w ++enc=gbk，不管当前文件什么编码，把它转存成gbk编码。
    :set fenc或:set fileencoding，查看当前文件的编码。
    在vimrc中添加set fileencoding=ucs-bom,utf-8,cp936，vim会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936对应于gbk编码。 ucs-bom对应于windows下的文件格式。

让vim 正确处理文件格式和文件编码，有赖于 ~/.vimrc的正确配置
12.3 文件格式

大致有三种文件格式：unix, dos, mac. 三种格式的区别主要在于回车键的编码：dos 下是回车加换行，unix 下只有 换行符，mac 下只有回车符。

    :e ++ff=dos filename, 让vim用dos格式打开这个文件。
    :w ++ff=mac filename, 以mac格式存储这个文件。
    :set ff，显示当前文件的格式。
    在vimrc中添加set fileformats=unix,dos,mac，让vim自动识别文件格式。

13. 编程辅助
13.1 一些按键

    gd: 跳转到局部变量的定义处；
    gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；
    g;: 上一个修改过的地方；
    g,: 下一个修改过的地方；
    [[: 跳转到上一个函数块开始，需要有单独一行的{。
    ]]: 跳转到下一个函数块开始，需要有单独一行的{。
    []: 跳转到上一个函数块结束，需要有单独一行的}。
    ][: 跳转到下一个函数块结束，需要有单独一行的}。
    [{: 跳转到当前块开始处；
    ]}: 跳转到当前块结束处；
    [/: 跳转到当前注释块开始处；
    ]/: 跳转到当前注释块结束处；
    %: 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else， #endif之间跳跃。

下面的括号匹配对编程很实用的。

    ci', di', yi'：修改、剪切或复制'之间的内容。
    ca', da', ya'：修改、剪切或复制'之间的内容，包含'。
    ci", di", yi"：修改、剪切或复制"之间的内容。
    ca", da", ya"：修改、剪切或复制"之间的内容，包含"。
    ci(, di(, yi(：修改、剪切或复制()之间的内容。
    ca(, da(, ya(：修改、剪切或复制()之间的内容，包含()。
    ci[, di[, yi[：修改、剪切或复制[]之间的内容。
    ca[, da[, ya[：修改、剪切或复制[]之间的内容，包含[]。
    ci{, di{, yi{：修改、剪切或复制{}之间的内容。
    ca{, da{, ya{：修改、剪切或复制{}之间的内容，包含{}。
    ci<, di<, yi<：修改、剪切或复制<>之间的内容。
    ca<, da<, ya<：修改、剪切或复制<>之间的内容，包含<>。

13.2 ctags

    ctags -R: 生成tag文件，-R表示也为子目录中的文件生成tags
    :set tags=path/tags -- 告诉ctags使用哪个tag文件
    :tag xyz -- 跳到xyz的定义处，或者将光标放在xyz上按C-]，返回用C-t
    :stag xyz -- 用分割的窗口显示xyz的定义，或者C-w ]， 如果用C-w n ]，就会打开一个n行高的窗口
    :ptag xyz -- 在预览窗口中打开xyz的定义，热键是C-w }。
    :pclose -- 关闭预览窗口。热键是C-w z。
    :pedit abc.h -- 在预览窗口中编辑abc.h
    :psearch abc -- 搜索当前文件和当前文件include的文件，显示包含abc的行。

有时一个tag可能有多个匹配，如函数重载，一个函数名就会有多个匹配。 这种情况会先跳转到第一个匹配处。

    :[n]tnext -- 下一[n]个匹配。
    :[n]tprev -- 上一[n]个匹配。
    :tfirst -- 第一个匹配
    :tlast -- 最后一个匹配
    :tselect tagname -- 打开选择列表

tab键补齐

    :tag xyz<tab> -- 补齐以xyz开头的tag名，继续按tab键，会显示其他的。
    :tag /xyz<tab> -- 会用名字中含有xyz的tag名补全。

13.3 cscope

    cscope -Rbq: 生成cscope.out文件
    :cs add /path/to/cscope.out /your/work/dir
    :cs find c func -- 查找func在哪些地方被调用
    :cw -- 打开quickfix窗口查看结果

13.4 gtags

Gtags综合了ctags和cscope的功能。 使用Gtags之前，你需要安装GNU Gtags。 然后在工程目录运行 gtags 。

    :Gtags funcname 定位到 funcname 的定义处。
    :Gtags -r funcname 查询 funcname被引用的地方。
    :Gtags -s symbol 定位 symbol 出现的地方。
    :Gtags -g string Goto string 出现的地方。 :Gtags -gi string 忽略大小写。
    :Gtags -f filename 显示 filename 中的函数列表。 你可以用 :Gtags -f % 显示当前文件。
    :Gtags -P pattern 显示路径中包含特定模式的文件。 如 :Gtags -P .h$ 显示所有头文件， :Gtags -P /vm/ 显示vm目录下的文件。

13.5 编译

vim提供了:make来编译程序，默认调用的是make， 如果你当前目录下有makefile，简单地:make即可。

如果你没有make程序，你可以通过配置makeprg选项来更改make调用的程序。 如果你只有一个abc.java文件，你可以这样设置：

set makeprg=javac\ abc.java

然后:make即可。如果程序有错，可以通过quickfix窗口查看错误。 不过如果要正确定位错误，需要设置好errorformat，让vim识别错误信息。 如：

:setl efm=%A%f:%l:\ %m,%-Z%p^,%-C%.%#

%f表示文件名，%l表示行号， %m表示错误信息，其它的还不能理解。 请参考 :help errorformat。
13.6 快速修改窗口

其实是quickfix插件提供的功能， 对编译调试程序非常有用 :)

    :copen -- 打开快速修改窗口。
    :cclose -- 关闭快速修改窗口。

快速修改窗口在make程序时非常有用，当make之后：

    :cl -- 在快速修改窗口中列出错误。
    :cn -- 定位到下一个错误。
    :cp -- 定位到上一个错误。
    :cr -- 定位到第一个错误。

13.7 自动补全

    C-x C-s -- 拼写建议。
    C-x C-v -- 补全vim选项和命令。
    C-x C-l -- 整行补全。
    C-x C-f -- 自动补全文件路径。弹出菜单后，按C-f循环选择，当然也可以按 C-n和C-p。
    C-x C-p 和C-x C-n -- 用文档中出现过的单词补全当前的词。 直接按C-p和C-n也可以。
    C-x C-o -- 编程时可以补全关键字和函数名啊。
    C-x C-i -- 根据头文件内关键字补全。
    C-x C-d -- 补全宏定义。
    C-x C-n -- 按缓冲区中出现过的关键字补全。 直接按C-n或C-p即可。

当弹出补全菜单后：

    C-p 向前切换成员；
    C-n 向后切换成员；
    C-e 退出下拉菜单，并退回到原来录入的文字；
    C-y 退出下拉菜单，并接受当前选项。

13.8 多行缩进缩出

    正常模式下，按两下>;光标所在行会缩进。
    如果先按了n，再按两下>;，光标以下的n行会缩进。
    对应的，按两下<;，光标所在行会缩出。
    如果在编辑代码文件，可以用=进行调整。
    在可视模式下，选择要调整的代码块，按=，代码会按书写规则缩排好。
    或者n =，调整n行代码的缩排。

13.9 折叠

    zf -- 创建折叠的命令，可以在一个可视区域上使用该命令；
    zd -- 删除当前行的折叠；
    zD -- 删除当前行的折叠；
    zfap -- 折叠光标所在的段；
    zo -- 打开折叠的文本；
    zc -- 收起折叠；
    za -- 打开/关闭当前折叠；
    zr -- 打开嵌套的折行；
    zm -- 收起嵌套的折行；
    zR (zO) -- 打开所有折行；
    zM (zC) -- 收起所有折行；
    zj -- 跳到下一个折叠处；
    zk -- 跳到上一个折叠处；
    zi -- enable/disable fold;

14. 命令行

normal模式下按:进入命令行模式
14.1 命令行模式下的快捷键：

    上下方向键：上一条或者下一条命令。如果已经输入了部分命令，则找上一 条或者下一条匹配的命令。
    左右方向键：左/右移一个字符。
    C-w： 向前删除一个单词。
    C-h： 向前删除一个字符，等同于Backspace。
    C-u： 从当前位置移动到命令行开头。
    C-b： 移动到命令行开头。
    C-e： 移动到命令行末尾。
    Shift-Left： 左移一个单词。
    Shift-Right： 右移一个单词。
    @： 重复上一次的冒号命令。
    q： 正常模式下，q然后按':'，打开命令行历史缓冲区， 可以像编辑文件一样编辑命令。
    q/和q? 可以打开查找历史记录。

14.2 执行外部命令

    :! cmd 执行外部命令。
    :!! 执行上一次的外部命令。
    :sh 调用shell，用exit返回vim。
    :r !cmd 将命令的返回结果插入文件当前位置。
    :m,nw !cmd 将文件的m行到n行之间的内容做为命令输入执行命令。

15. 其它
15.1 工作目录

    :pwd 显示vim的工作目录。
    :cd path 改变vim的工作目录。
    :set autochdir 可以让vim 根据编辑的文件自动切换工作目录。

15.2 一些快捷键（收集中）

    K: 打开光标所在词的manpage。
    *: 向下搜索光标所在词。
    g*: 同上，但部分符合即可。
    #: 向上搜索光标所在词。
    g#: 同上，但部分符合即可。
    g C-g: 统计全文或统计部分的字数。

15.3 在线帮助

    :h(elp)或F1 打开总的帮助。
    :help user-manual 打开用户手册。
    命令帮助的格式为：第一行指明怎么使用那个命令； 然后是缩进的一段解释这个命令的作用，然后是进一步的信息。
    :helptags somepath 为somepath中的文档生成索引。
    :helpgrep 可以搜索整个帮助文档，匹配的列表显示在quickfix窗口中。
    Ctrl+] 跳转到tag主题，Ctrl+t 跳回。
    :ver 显示版本信息。

15.4 一些小功能

    简单计算器: 在插入模式下，输入C-r =，然后输入表达式，就能在 光标处得到计算结果。

